Q:  When would you want to use a remote repository rather than keeping all
	your world local?
A:  If you wanted to collaborate your code with other users and team up with
	other people, even if they lived a hundred miles away from you, you can
	still work together.

Q: 	Why might you want to always pull changes manually rather than having Git
	automatically stay up-to-date with your remote repository?
A:	Git needs Internet access to pull files, so if it always did it
	automatically we'd end up getting used to not doing it ourselves, and then
	some day commit something without Internet and the project not making it
	through.

Q:	Describe the differences between forks, clones, and branches. When would
	you use one instead of the other?
A:	A fork is a copy on of someone else's project on GitHub on your own
	profile. A clone is a copy of a GitHub project or a project on your local
	repository which isn't saved on your GitHub account, but rather on your
	system. A branch is when a project breaks off in a different direction
	and gets seperate commits from the rest of the project and has nothing to
	do with GitHub. You use a fork when you want to make some edits to an
	existing GitHub project easily. You use clone normally to make bigger
	edits to a GitHub project, and you would use branches if you wanted to
	experiment different things in your project like different languages
	and difficulties, etc.

Q:	What is the benefit of having a copy of the last known state of the remote
	stored locally?
A:	If you had to go offline for a while it would help to have a copy so you
	can edit it anyway.

Q:	How would you collaborate without using Git or GitHub? What would be
	easier, and what would be harder?
A:	You'd have to work together in the same room or constantly video call
	or go back and forth sharing your files to one another, and it would just
	get messy in someone's daily schedule. However, it would be easier to fix 
	conflicts if you're face to face.

Q:	When would you want to make changes in a seperate branch rather than
	directly in master? What benefits does each approach have?
A:	When you're making code that you're not sure will work or not, and
	don't want to risk breaking your code, you might want to use a branch.
	However, keeping it on master will avoid any future merge conflicts you
	may come across.


